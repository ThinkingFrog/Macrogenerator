# Generated from Macro.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,98,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,
        1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,3,8,53,8,8,1,9,1,9,5,9,57,8,9,10,
        9,12,9,60,9,9,1,10,1,10,1,10,3,10,65,8,10,1,10,1,10,1,10,1,10,5,
        10,71,8,10,10,10,12,10,74,9,10,1,11,4,11,77,8,11,11,11,12,11,78,
        1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,5,13,92,8,
        13,10,13,12,13,95,9,13,1,13,1,13,0,0,14,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,1,0,2,1,0,49,57,3,0,
        9,9,13,13,32,32,107,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,1,29,1,0,0,0,3,36,1,0,0,0,5,38,1,0,0,0,7,40,1,0,0,0,9,42,1,0,
        0,0,11,44,1,0,0,0,13,46,1,0,0,0,15,48,1,0,0,0,17,52,1,0,0,0,19,54,
        1,0,0,0,21,64,1,0,0,0,23,76,1,0,0,0,25,82,1,0,0,0,27,86,1,0,0,0,
        29,30,5,100,0,0,30,31,5,101,0,0,31,32,5,102,0,0,32,33,5,105,0,0,
        33,34,5,110,0,0,34,35,5,101,0,0,35,2,1,0,0,0,36,37,2,65,90,0,37,
        4,1,0,0,0,38,39,2,97,122,0,39,6,1,0,0,0,40,41,5,95,0,0,41,8,1,0,
        0,0,42,43,5,40,0,0,43,10,1,0,0,0,44,45,5,41,0,0,45,12,1,0,0,0,46,
        47,5,44,0,0,47,14,1,0,0,0,48,49,7,0,0,0,49,16,1,0,0,0,50,53,5,48,
        0,0,51,53,3,15,7,0,52,50,1,0,0,0,52,51,1,0,0,0,53,18,1,0,0,0,54,
        58,3,15,7,0,55,57,3,17,8,0,56,55,1,0,0,0,57,60,1,0,0,0,58,56,1,0,
        0,0,58,59,1,0,0,0,59,20,1,0,0,0,60,58,1,0,0,0,61,65,3,3,1,0,62,65,
        3,5,2,0,63,65,3,7,3,0,64,61,1,0,0,0,64,62,1,0,0,0,64,63,1,0,0,0,
        65,72,1,0,0,0,66,71,3,3,1,0,67,71,3,5,2,0,68,71,3,17,8,0,69,71,3,
        7,3,0,70,66,1,0,0,0,70,67,1,0,0,0,70,68,1,0,0,0,70,69,1,0,0,0,71,
        74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,22,1,0,0,0,74,72,1,0,0,
        0,75,77,7,1,0,0,76,75,1,0,0,0,77,78,1,0,0,0,78,76,1,0,0,0,78,79,
        1,0,0,0,79,80,1,0,0,0,80,81,6,11,0,0,81,24,1,0,0,0,82,83,5,10,0,
        0,83,84,1,0,0,0,84,85,6,12,0,0,85,26,1,0,0,0,86,87,3,9,4,0,87,93,
        3,21,10,0,88,89,3,13,6,0,89,90,3,21,10,0,90,92,1,0,0,0,91,88,1,0,
        0,0,92,95,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,93,
        1,0,0,0,96,97,3,11,5,0,97,28,1,0,0,0,8,0,52,58,64,70,72,78,93,1,
        6,0,0
    ]

class MacroLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DEFINE_KEYWORD = 1
    UPPER_CHAR = 2
    LOWER_CHAR = 3
    UNDERSCORE = 4
    LEFT_BRACKET = 5
    RIGHT_BRACKET = 6
    ARGS_SEPARATOR = 7
    NON_ZERO_DIGIT = 8
    DIGIT = 9
    INT = 10
    STRING = 11
    WS = 12
    NL = 13
    MACRO_ARGS = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'define'", "'_'", "'('", "')'", "','", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "DEFINE_KEYWORD", "UPPER_CHAR", "LOWER_CHAR", "UNDERSCORE", 
            "LEFT_BRACKET", "RIGHT_BRACKET", "ARGS_SEPARATOR", "NON_ZERO_DIGIT", 
            "DIGIT", "INT", "STRING", "WS", "NL", "MACRO_ARGS" ]

    ruleNames = [ "DEFINE_KEYWORD", "UPPER_CHAR", "LOWER_CHAR", "UNDERSCORE", 
                  "LEFT_BRACKET", "RIGHT_BRACKET", "ARGS_SEPARATOR", "NON_ZERO_DIGIT", 
                  "DIGIT", "INT", "STRING", "WS", "NL", "MACRO_ARGS" ]

    grammarFileName = "Macro.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


